// Example usage in an app component
import React, { useRef, useState } from 'react';
import { ToastContextProvider, useToast, ToastRef } from './ui-pattern/toast/useToast';
import { ToastPosition } from './ui-toolkit/Toast/Toast';
import styled from '@emotion/styled';

const Button = styled.button`
  background-color: #3b82f6;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px 16px;
  font-size: 14px;
  cursor: pointer;
  margin: 4px;
  
  &:hover {
    background-color: #2563eb;
  }
`;

const ActionButton = styled.button`
  background-color: white;
  color: #3b82f6;
  border-radius: 4px;
  border: none;
  padding: 4px 8px;
  font-size: 12px;
  font-weight: 600;
  cursor: pointer;
`;

const PositionSelector = styled.select`
  padding: 8px 12px;
  border-radius: 6px;
  border: 1px solid #d1d5db;
  margin: 4px;
  font-size: 14px;
`;

const Container = styled.div`
  padding: 20px;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  margin-bottom: 20px;
`;

// Demo component using toast with position selection
const ToastPositionDemo = () => {
  const { toast, updatePosition } = useToast();
  const [currentPosition, setCurrentPosition] = useState<ToastPosition>('bottom-right');

  const handlePositionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newPosition = e.target.value as ToastPosition;
    setCurrentPosition(newPosition);
    updatePosition(newPosition);
  };

  const showToast = (variant: 'default' | 'success' | 'error' | 'warning' | 'info') => {
    toast({
      title: `${variant.charAt(0).toUpperCase() + variant.slice(1)} Toast`,
      description: `This toast appears at the ${currentPosition} position.`,
      variant,
      position: currentPosition,
      duration: 5000,
    });
  };

  const showToastWithCustomPosition = () => {
    // Showing toast at a specific position regardless of global position setting
    const positions: ToastPosition[] = [
      'top-left', 'top-center', 'top-right',
      'bottom-left', 'bottom-center', 'bottom-right'
    ];
    
    // Show toasts at all positions
    positions.forEach((position, index) => {
      setTimeout(() => {
        toast({
          title: `Toast at ${position}`,
          description: `This toast appears at the ${position} position.`,
          variant: 'info',
          position: position,
          duration: 5000,
        });
      }, index * 300); // Stagger the appearance
    });
  };

  return (
    <Container>
      <h2>Toast Position Demo</h2>
      <div>
        <label htmlFor="position-selector">Global Toast Position: </label>
        <PositionSelector 
          id="position-selector"
          value={currentPosition} 
          onChange={handlePositionChange}
        >
          <option value="top-left">Top Left</option>
          <option value="top-center">Top Center</option>
          <option value="top-right">Top Right</option>
          <option value="bottom-left">Bottom Left</option>
          <option value="bottom-center">Bottom Center</option>
          <option value="bottom-right">Bottom Right</option>
        </PositionSelector>
      </div>
      
      <div style={{ marginTop: '16px' }}>
        <Button onClick={() => showToast('success')}>Success Toast</Button>
        <Button onClick={() => showToast('error')}>Error Toast</Button>
        <Button onClick={() => showToast('warning')}>Warning Toast</Button>
        <Button onClick={() => showToast('info')}>Info Toast</Button>
        <Button onClick={showToastWithCustomPosition}>Show Toasts at All Positions</Button>
      </div>
    </Container>
  );
};

// Component using direct ref to show toast at specific positions
const ToastWithRef = () => {
  const { toastRef } = useToast();

  const showToastAtSpecificPosition = (position: ToastPosition) => {
    toastRef.current?.show({
      title: `Ref Toast at ${position}`,
      description: `This toast was triggered using a direct ref at ${position}.`,
      variant: 'success',
      position: position,
      duration: 5000,
    });
  };

  return (
    <Container>
      <h2>Position Control via Ref</h2>
      <div>
        <Button onClick={() => showToastAtSpecificPosition('top-left')}>Show at Top Left</Button>
        <Button onClick={() => showToastAtSpecificPosition('top-center')}>Show at Top Center</Button>
        <Button onClick={() => showToastAtSpecificPosition('top-right')}>Show at Top Right</Button>
        <Button onClick={() => showToastAtSpecificPosition('bottom-left')}>Show at Bottom Left</Button>
        <Button onClick={() => showToastAtSpecificPosition('bottom-center')}>Show at Bottom Center</Button>
        <Button onClick={() => showToastAtSpecificPosition('bottom-right')}>Show at Bottom Right</Button>
      </div>
    </Container>
  );
};

// Main app component
const App = () => {
  const toastRef = useRef<ToastRef>(null);

  return (
    <ToastContextProvider ref={toastRef} defaultPosition="bottom-right">
      <h1>Toast Demo with Position Control</h1>
      <ToastPositionDemo />
      <ToastWithRef />
    </ToastContextProvider>
  );
};

export default App;

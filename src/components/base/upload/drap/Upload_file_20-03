import styled from "@emotion/styled";
import { CheckCircledIcon, CrossCircledIcon, TrashIcon, UploadIcon } from "@radix-ui/react-icons";
import React, { useCallback, useRef, useState } from "react";

// Types
export interface FileItem {
  id: string;
  file: File;
  preview?: string;
  hasError?: boolean;
  errorMessage?: string;
}

interface UploadProps {
  multiple?: boolean;
  accept?: string;
  maxSize?: number; // in bytes
  onFileSelect?: (files: File[]) => void;
  onFileRemove?: (fileId: string) => void;
}

// Styled Components
const UploadContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 16px;
  width: 100%;
`;

const DropZone = styled.div<{ isDragActive: boolean }>`
  border: 2px dashed ${(props) => (props.isDragActive ? "#7c3aed" : "#e5e7eb")};
  border-radius: 8px;
  padding: 40px 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  background-color: ${(props) =>
    props.isDragActive ? "rgba(124, 58, 237, 0.05)" : "#fafafa"};
  transition: all 0.2s ease;

  &:hover {
    border-color: #7c3aed;
    background-color: rgba(124, 58, 237, 0.05);
  }
`;

const IconContainer = styled.div`
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background-color: #f3f4f6;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 16px;
`;

const UploadText = styled.div`
  text-align: center;

  h3 {
    margin: 0 0 8px 0;
    font-size: 16px;
    font-weight: 600;
    color: #111827;
  }

  p {
    margin: 0;
    font-size: 14px;
    color: #6b7280;
  }
`;

const FilesList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 8px;
  max-height: 300px;
  overflow-y: auto;
`;

const FileItem = styled.div<{ hasError?: boolean }>`
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 10px;
  border-radius: 6px;
  background-color: ${(props) => (props.hasError ? "#FEF2F2" : "#f9fafb")};
  border: 1px solid ${(props) => (props.hasError ? "#FEE2E2" : "#f3f4f6")};
`;

const FilePreview = styled.div<{ bgImage?: string }>`
  width: 40px;
  height: 40px;
  border-radius: 4px;
  background-color: #e5e7eb;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  font-weight: 600;
  color: #6b7280;
  font-size: 12px;
  ${(props) =>
    props.bgImage
      ? `background-image: url(${props.bgImage}); background-size: cover;`
      : ""}
`;

const FileInfo = styled.div`
  flex: 1;

  .file-name {
    font-size: 14px;
    font-weight: 500;
    color: #111827;
    margin-bottom: 4px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 300px;
  }

  .file-size {
    font-size: 12px;
    color: #6b7280;
  }
  
  .error-message {
    font-size: 12px;
    color: #ef4444;
    margin-top: 2px;
  }
`;

const ActionButton = styled.button`
  background: none;
  border: none;
  padding: 4px;
  cursor: pointer;
  color: #6b7280;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;

  &:hover {
    background-color: #f3f4f6;
    color: #111827;
  }
`;

const HiddenInput = styled.input`
  display: none;
`;

// New styled components for stats and control buttons
const StatsContainer = styled.div`
  display: flex;
  justify-content: space-between;
  padding: 12px 16px;
  background-color: #f9fafb;
  border-radius: 8px;
  border: 1px solid #f3f4f6;
  margin-top: 8px;
`;

const Stats = styled.div`
  display: flex;
  gap: 16px;
`;

const StatItem = styled.div<{ error?: boolean }>`
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: ${(props) => (props.error ? "#ef4444" : "#111827")};
`;

const ControlButtons = styled.div`
  display: flex;
  gap: 8px;
`;

const Button = styled.button<{ variant?: string }>`
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 4px;
  color: ${(props) => (props.variant === "danger" ? "white" : "#6b7280")};
  background-color: ${(props) => (props.variant === "danger" ? "#ef4444" : "#f3f4f6")};

  &:hover {
    background-color: ${(props) => (props.variant === "danger" ? "#dc2626" : "#e5e7eb")};
  }
`;

// Utility Functions
const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return "0 Bytes";

  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  return `${parseFloat((bytes / Math.pow(1024, i)).toFixed(2))} ${sizes[i]}`;
};

const getFileExtension = (fileName: string): string => {
  return fileName.split(".").pop() || "";
};

// Main Component
const Upload: React.FC<UploadProps> = ({
  multiple = false,
  accept,
  maxSize,
  onFileSelect,
  onFileRemove,
}) => {
  const [files, setFiles] = useState<FileItem[]>([]);
  const [isDragActive, setIsDragActive] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);

  const handleDragEnter = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragActive(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragActive(false);
  }, []);

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);

  const processFiles = useCallback(
    (fileList: FileList) => {
      const newFiles: File[] = [];
      const newFileItems: FileItem[] = [];

      Array.from(fileList).forEach((file) => {
        const fileId = `${file.name}-${Date.now()}`;
        const newFile: FileItem = {
          id: fileId,
          file,
          hasError: false
        };

        if (maxSize && file.size > maxSize) {
          newFile.hasError = true;
          newFile.errorMessage = `File exceeds maximum size limit of ${formatFileSize(maxSize)}`;
        } else {
          newFiles.push(file);
        }

        if (file.type.startsWith("image/")) {
          newFile.preview = URL.createObjectURL(file);
        }

        newFileItems.push(newFile);
      });

      setFiles((prev) => [...prev, ...newFileItems]);

      if (newFiles.length > 0 && onFileSelect) {
        onFileSelect(newFiles);
      }
    },
    [maxSize, onFileSelect]
  );

  const handleDrop = useCallback(
    (e: React.DragEvent) => {
      e.preventDefault();
      e.stopPropagation();
      setIsDragActive(false);

      if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
        processFiles(e.dataTransfer.files);
      }
    },
    [processFiles]
  );

  const handleFileInputChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      if (e.target.files && e.target.files.length > 0) {
        processFiles(e.target.files);
        if (inputRef.current) {
          inputRef.current.value = "";
        }
      }
    },
    [processFiles]
  );

  const openFileDialog = () => {
    if (inputRef.current) {
      inputRef.current.click();
    }
  };

  const handleRemoveFile = (fileId: string) => {
    setFiles((prev) => {
      const updatedFiles = prev.filter((file) => file.id !== fileId);
      const removedFile = prev.find((file) => file.id === fileId);

      if (removedFile?.preview) {
        URL.revokeObjectURL(removedFile.preview);
      }

      if (onFileRemove && !removedFile?.hasError) {
        onFileRemove(fileId);
      }

      return updatedFiles;
    });
  };

  const getFilePreview = (file: FileItem) => {
    if (file.preview) {
      return <FilePreview bgImage={file.preview} />;
    }

    const ext = getFileExtension(file.file.name);
    return <FilePreview>{ext.toUpperCase()}</FilePreview>;
  };

  // File statistics
  const totalFiles = files.length;
  const errorFiles = files.filter(file => file.hasError).length;
  const successFiles = totalFiles - errorFiles;

  // New control functions
  const clearAllFiles = () => {
    files.forEach(file => {
      if (file.preview) {
        URL.revokeObjectURL(file.preview);
      }
    });
    setFiles([]);
  };

  const clearErrorFiles = () => {
    setFiles(prev => {
      const validFiles = prev.filter(file => !file.hasError);
      
      // Revoke object URLs for files being removed
      prev.forEach(file => {
        if (file.hasError && file.preview) {
          URL.revokeObjectURL(file.preview);
        }
      });
      
      return validFiles;
    });
  };

  return (
    <UploadContainer>
      <DropZone
        isDragActive={isDragActive}
        onClick={openFileDialog}
        onDragEnter={handleDragEnter}
        onDragLeave={handleDragLeave}
        onDragOver={handleDragOver}
        onDrop={handleDrop}
      >
        <IconContainer>
          <UploadIcon width={24} height={24} />
        </IconContainer>
        <UploadText>
          <h3>Upload files</h3>
          <p>Drag and drop files here or click to browse</p>
          {accept && <p>Accepted file types: {accept}</p>}
          {maxSize && <p>Maximum file size: {formatFileSize(maxSize)}</p>}
        </UploadText>
      </DropZone>

      <HiddenInput
        ref={inputRef}
        type="file"
        multiple={multiple}
        accept={accept}
        onChange={handleFileInputChange}
      />

      {totalFiles > 0 && (
        <>
          <StatsContainer>
            <Stats>
              <StatItem>
                <CheckCircledIcon width={16} height={16} style={{ color: "#10b981" }} />
                {successFiles} file{successFiles !== 1 ? 's' : ''} uploaded
              </StatItem>
              {errorFiles > 0 && (
                <StatItem error>
                  <CrossCircledIcon width={16} height={16} />
                  {errorFiles} file{errorFiles !== 1 ? 's' : ''} with errors
                </StatItem>
              )}
            </Stats>
            <ControlButtons>
              {errorFiles > 0 && (
                <Button onClick={clearErrorFiles}>
                  Clear error files
                </Button>
              )}
              <Button variant="danger" onClick={clearAllFiles}>
                <TrashIcon width={14} height={14} />
                Clear all
              </Button>
            </ControlButtons>
          </StatsContainer>

          <FilesList>
            {files.map((file) => (
              <FileItem key={file.id} hasError={file.hasError}>
                {getFilePreview(file)}

                <FileInfo>
                  <div className="file-name">{file.file.name}</div>
                  <div className="file-size">
                    {formatFileSize(file.file.size)}
                  </div>
                  {file.hasError && (
                    <div className="error-message">{file.errorMessage}</div>
                  )}
                </FileInfo>

                {!file.hasError ? (
                  <CheckCircledIcon
                    width={16}
                    height={16}
                    style={{ color: "#10b981" }}
                  />
                ) : (
                  <CrossCircledIcon
                    width={16}
                    height={16}
                    style={{ color: "#ef4444" }}
                  />
                )}

                <ActionButton onClick={() => handleRemoveFile(file.id)}>
                  <TrashIcon width={16} height={16} color="#ef4444" />
                </ActionButton>
              </FileItem>
            ))}
          </FilesList>
        </>
      )}
    </UploadContainer>
  );
};

export default Upload;

// radix-ui
// ui-toolkit/Toast/Toast.tsx
import React from 'react';
import * as RadixToast from '@radix-ui/react-toast';
import styled from '@emotion/styled';
import { keyframes } from '@emotion/react';

// Animation keyframes
const slideIn = keyframes`
  from {
    transform: translateX(calc(100% + var(--viewport-padding)));
  }
  to {
    transform: translateX(0);
  }
`;

const slideOut = keyframes`
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(calc(100% + var(--viewport-padding)));
  }
`;

const swipeOut = keyframes`
  from {
    transform: translateX(var(--radix-toast-swipe-end-x));
  }
  to {
    transform: translateX(calc(100% + var(--viewport-padding)));
  }
`;

// Styled components
const ToastViewport = styled(RadixToast.Viewport)`
  --viewport-padding: 24px;
  position: fixed;
  bottom: 0;
  right: 0;
  display: flex;
  flex-direction: column;
  padding: var(--viewport-padding);
  gap: 10px;
  width: 390px;
  max-width: 100vw;
  margin: 0;
  list-style: none;
  z-index: 2147483647;
  outline: none;
`;

const StyledToast = styled(RadixToast.Root)<{ variant?: 'default' | 'success' | 'error' | 'warning' | 'info' }>`
  background-color: ${(props) => {
    switch (props.variant) {
      case 'success':
        return '#10B981';
      case 'error':
        return '#EF4444';
      case 'warning':
        return '#F59E0B';
      case 'info':
        return '#3B82F6';
      default:
        return '#FFFFFF';
    }
  }};
  color: ${(props) => (props.variant === 'default' ? '#374151' : '#FFFFFF')};
  border-radius: 6px;
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
  padding: 16px;
  display: grid;
  grid-template-areas: 'title action' 'description action';
  grid-template-columns: auto max-content;
  column-gap: 16px;
  align-items: center;

  &[data-state="open"] {
    animation: ${slideIn} 150ms cubic-bezier(0.16, 1, 0.3, 1);
  }
  
  &[data-state="closed"] {
    animation: ${slideOut} 100ms ease-in;
  }
  
  &[data-swipe="move"] {
    transform: translateX(var(--radix-toast-swipe-move-x));
  }
  
  &[data-swipe="cancel"] {
    transform: translateX(0);
    transition: transform 200ms ease-out;
  }
  
  &[data-swipe="end"] {
    animation: ${swipeOut} 100ms ease-out;
  }
`;

const ToastTitle = styled(RadixToast.Title)`
  grid-area: title;
  margin-bottom: 4px;
  font-weight: 600;
  font-size: 16px;
`;

const ToastDescription = styled(RadixToast.Description)`
  grid-area: description;
  margin: 0;
  font-size: 14px;
  line-height: 1.4;
  opacity: 0.9;
`;

const ToastAction = styled(RadixToast.Action)`
  grid-area: action;
`;

const ToastClose = styled(RadixToast.Close)`
  background: transparent;
  border: none;
  padding: 4px;
  cursor: pointer;
  color: inherit;
  opacity: 0.7;
  &:hover {
    opacity: 1;
  }
`;

// Component types
export interface ToastProps {
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
  title?: string;
  description?: string;
  action?: React.ReactNode;
  duration?: number;
  variant?: 'default' | 'success' | 'error' | 'warning' | 'info';
  children?: React.ReactNode;
}

// Toast component
export const Toast: React.FC<ToastProps> = ({
  open,
  onOpenChange,
  title,
  description,
  action,
  duration = 5000,
  variant = 'default',
  children,
}) => {
  return (
    <StyledToast
      open={open}
      onOpenChange={onOpenChange}
      duration={duration}
      variant={variant}
    >
      {title && <ToastTitle>{title}</ToastTitle>}
      {description && <ToastDescription>{description}</ToastDescription>}
      {children}
      {action && <ToastAction asChild>{action}</ToastAction>}
      <ToastClose aria-label="Close">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
        </svg>
      </ToastClose>
    </StyledToast>
  );
};

// Export ToastProvider for use in the app
export const ToastProvider = RadixToast.Provider;
export const ToastViewportComponent = ToastViewport;

// Re-export for convenience
export { RadixToast };


// parten
// ui-pattern/toast/useToast.tsx
import React, { createContext, useContext, useState } from 'react';
import { ToastProvider, Toast, ToastViewportComponent } from '../../ui-toolkit/Toast/Toast';

// Types
type ToastVariant = 'default' | 'success' | 'error' | 'warning' | 'info';

interface ToastOptions {
  title?: string;
  description?: string;
  action?: React.ReactNode;
  duration?: number;
  variant?: ToastVariant;
  onOpenChange?: (open: boolean) => void;
}

interface ToastContextValue {
  toast: (options: ToastOptions) => void;
  dismiss: (id: string) => void;
}

// Create context
const ToastContext = createContext<ToastContextValue | undefined>(undefined);

// Toast item type
interface ToastItem extends ToastOptions {
  id: string;
  open: boolean;
}

// Provider component
export const ToastContextProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [toasts, setToasts] = useState<ToastItem[]>([]);

  const toast = (options: ToastOptions) => {
    const id = Math.random().toString(36).substring(2, 9);
    setToasts((prevToasts) => [
      ...prevToasts,
      {
        id,
        open: true,
        ...options,
      },
    ]);
    return id;
  };

  const dismiss = (id: string) => {
    setToasts((prevToasts) =>
      prevToasts.map((toast) =>
        toast.id === id ? { ...toast, open: false } : toast
      )
    );
  };

  const handleOpenChange = (id: string, open: boolean) => {
    if (!open) {
      setToasts((prevToasts) =>
        prevToasts.map((toast) =>
          toast.id === id ? { ...toast, open } : toast
        )
      );
      
      // Remove from state after animation completes
      setTimeout(() => {
        setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));
      }, 300);
    }
  };

  return (
    <ToastContext.Provider value={{ toast, dismiss }}>
      <ToastProvider>
        {children}
        {toasts.map((toast) => (
          <Toast
            key={toast.id}
            open={toast.open}
            onOpenChange={(open) => {
              handleOpenChange(toast.id, open);
              toast.onOpenChange?.(open);
            }}
            title={toast.title}
            description={toast.description}
            action={toast.action}
            duration={toast.duration}
            variant={toast.variant}
          />
        ))}
        <ToastViewportComponent />
      </ToastProvider>
    </ToastContext.Provider>
  );
};

// Hook for consuming the toast context
export const useToast = () => {
  const context = useContext(ToastContext);
  if (context === undefined) {
    throw new Error('useToast must be used within a ToastContextProvider');
  }
  return context;
};

// used
// Example usage in an app component
import React from 'react';
import { ToastContextProvider, useToast } from './ui-pattern/toast/useToast';
import styled from '@emotion/styled';

const Button = styled.button`
  background-color: #3b82f6;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px 16px;
  font-size: 14px;
  cursor: pointer;
  margin: 4px;
  
  &:hover {
    background-color: #2563eb;
  }
`;

const ActionButton = styled.button`
  background-color: white;
  color: #3b82f6;
  border-radius: 4px;
  border: none;
  padding: 4px 8px;
  font-size: 12px;
  font-weight: 600;
  cursor: pointer;
`;

// Demo component using the toast
const ToastDemo = () => {
  const { toast } = useToast();

  const showToast = (variant: 'default' | 'success' | 'error' | 'warning' | 'info') => {
    toast({
      title: `${variant.charAt(0).toUpperCase() + variant.slice(1)} Toast`,
      description: `This is a ${variant} toast notification.`,
      variant,
      duration: 5000,
    });
  };

  const showToastWithAction = () => {
    toast({
      title: 'Action Required',
      description: 'Please confirm your action.',
      variant: 'info',
      action: <ActionButton>Confirm</ActionButton>,
      duration: 10000,
    });
  };

  return (
    <div>
      <h2>Toast Demo</h2>
      <div>
        <Button onClick={() => showToast('default')}>Default Toast</Button>
        <Button onClick={() => showToast('success')}>Success Toast</Button>
        <Button onClick={() => showToast('error')}>Error Toast</Button>
        <Button onClick={() => showToast('warning')}>Warning Toast</Button>
        <Button onClick={() => showToast('info')}>Info Toast</Button>
        <Button onClick={showToastWithAction}>Toast with Action</Button>
      </div>
    </div>
  );
};

// Main app component
const App = () => {
  return (
    <ToastContextProvider>
      <ToastDemo />
    </ToastContextProvider>
  );
};

export default App;

//update
// ui-toolkit/Toast/Toast.tsx
import React from 'react';
import * as RadixToast from '@radix-ui/react-toast';
import styled from '@emotion/styled';
import { keyframes } from '@emotion/react';

// Animation keyframes
const slideIn = keyframes`
  from {
    transform: translateX(calc(100% + var(--viewport-padding)));
  }
  to {
    transform: translateX(0);
  }
`;

const slideOut = keyframes`
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(calc(100% + var(--viewport-padding)));
  }
`;

const swipeOut = keyframes`
  from {
    transform: translateX(var(--radix-toast-swipe-end-x));
  }
  to {
    transform: translateX(calc(100% + var(--viewport-padding)));
  }
`;

// Styled components
const ToastViewport = styled(RadixToast.Viewport)`
  --viewport-padding: 24px;
  position: fixed;
  bottom: 0;
  right: 0;
  display: flex;
  flex-direction: column;
  padding: var(--viewport-padding);
  gap: 10px;
  width: 390px;
  max-width: 100vw;
  margin: 0;
  list-style: none;
  z-index: 2147483647;
  outline: none;
`;

const StyledToast = styled(RadixToast.Root)<{ variant?: 'default' | 'success' | 'error' | 'warning' | 'info' }>`
  background-color: ${(props) => {
    switch (props.variant) {
      case 'success':
        return '#10B981';
      case 'error':
        return '#EF4444';
      case 'warning':
        return '#F59E0B';
      case 'info':
        return '#3B82F6';
      default:
        return '#FFFFFF';
    }
  }};
  color: ${(props) => (props.variant === 'default' ? '#374151' : '#FFFFFF')};
  border-radius: 6px;
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
  padding: 16px;
  display: flex;
  flex-direction: column;
  position: relative;

  &[data-state="open"] {
    animation: ${slideIn} 150ms cubic-bezier(0.16, 1, 0.3, 1);
  }
  
  &[data-state="closed"] {
    animation: ${slideOut} 100ms ease-in;
  }
  
  &[data-swipe="move"] {
    transform: translateX(var(--radix-toast-swipe-move-x));
  }
  
  &[data-swipe="cancel"] {
    transform: translateX(0);
    transition: transform 200ms ease-out;
  }
  
  &[data-swipe="end"] {
    animation: ${swipeOut} 100ms ease-out;
  }
`;

const ContentContainer = styled.div`
  display: flex;
  flex-direction: column;
  margin-right: 24px; // Space for close button
`;

const ToastTitle = styled(RadixToast.Title)`
  margin-bottom: 4px;
  font-weight: 600;
  font-size: 16px;
`;

const ToastDescription = styled(RadixToast.Description)`
  margin: 0;
  font-size: 14px;
  line-height: 1.4;
  opacity: 0.9;
`;

const ToastClose = styled(RadixToast.Close)`
  position: absolute;
  top: 12px;
  right: 12px;
  background: transparent;
  border: none;
  padding: 4px;
  cursor: pointer;
  color: inherit;
  opacity: 0.7;
  &:hover {
    opacity: 1;
  }
`;

const ActionContainer = styled.div`
  display: flex;
  justify-content: flex-end;
  margin-top: 12px;
`;

// Component types
export interface ToastProps {
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
  title?: string;
  description?: string;
  action?: React.ReactNode;
  duration?: number;
  variant?: 'default' | 'success' | 'error' | 'warning' | 'info';
  children?: React.ReactNode;
}

// Toast component
export const Toast: React.FC<ToastProps> = ({
  open,
  onOpenChange,
  title,
  description,
  action,
  duration = 5000,
  variant = 'default',
  children,
}) => {
  return (
    <StyledToast
      open={open}
      onOpenChange={onOpenChange}
      duration={duration}
      variant={variant}
    >
      <ContentContainer>
        {title && <ToastTitle>{title}</ToastTitle>}
        {description && <ToastDescription>{description}</ToastDescription>}
        {children}
      </ContentContainer>

      <ToastClose aria-label="Close">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
        </svg>
      </ToastClose>

      {action && (
        <ActionContainer>
          <RadixToast.Action altText="Toast action">{action}</RadixToast.Action>
        </ActionContainer>
      )}
    </StyledToast>
  );
};

// Export ToastProvider for use in the app
export const ToastProvider = RadixToast.Provider;
export const ToastViewportComponent = ToastViewport;

// Re-export for convenience
export { RadixToast };

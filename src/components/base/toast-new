// --------------------------------------
// ANIMATIONS MODULE
// --------------------------------------
import { keyframes } from '@emotion/react';

// Toast Position Types
export type ToastPosition = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';

// Animation keyframes
const slideInRight = keyframes`
  from { transform: translateX(calc(100% + var(--viewport-padding))); }
  to { transform: translateX(0); }
`;

const slideInLeft = keyframes`
  from { transform: translateX(calc(-100% - var(--viewport-padding))); }
  to { transform: translateX(0); }
`;

const slideInTop = keyframes`
  from { transform: translateY(calc(-100% - var(--viewport-padding))); }
  to { transform: translateY(0); }
`;

const slideInBottom = keyframes`
  from { transform: translateY(calc(100% + var(--viewport-padding))); }
  to { transform: translateY(0); }
`;

const slideOutRight = keyframes`
  from { transform: translateX(0); }
  to { transform: translateX(calc(100% + var(--viewport-padding))); }
`;

const slideOutLeft = keyframes`
  from { transform: translateX(0); }
  to { transform: translateX(calc(-100% - var(--viewport-padding))); }
`;

const slideOutTop = keyframes`
  from { transform: translateY(0); }
  to { transform: translateY(calc(-100% - var(--viewport-padding))); }
`;

const slideOutBottom = keyframes`
  from { transform: translateY(0); }
  to { transform: translateY(calc(100% + var(--viewport-padding))); }
`;

const swipeOutRight = keyframes`
  from { transform: translateX(var(--radix-toast-swipe-end-x)); }
  to { transform: translateX(calc(100% + var(--viewport-padding))); }
`;

const swipeOutLeft = keyframes`
  from { transform: translateX(var(--radix-toast-swipe-end-x)); }
  to { transform: translateX(calc(-100% - var(--viewport-padding))); }
`;

const swipeOutTop = keyframes`
  from { transform: translateY(var(--radix-toast-swipe-end-y)); }
  to { transform: translateY(calc(-100% - var(--viewport-padding))); }
`;

const swipeOutBottom = keyframes`
  from { transform: translateY(var(--radix-toast-swipe-end-y)); }
  to { transform: translateY(calc(100% + var(--viewport-padding))); }
`;

// Animation utilities
export const animations = {
  getSlideInAnimation: (position: ToastPosition) => {
    if (position.includes('left')) return slideInLeft;
    if (position.includes('right')) return slideInRight;
    if (position.includes('top')) return slideInTop;
    return slideInBottom;
  },

  getSlideOutAnimation: (position: ToastPosition) => {
    if (position.includes('left')) return slideOutLeft;
    if (position.includes('right')) return slideOutRight;
    if (position.includes('top')) return slideOutTop;
    return slideOutBottom;
  },

  getSwipeOutAnimation: (position: ToastPosition) => {
    if (position.includes('left')) return swipeOutLeft;
    if (position.includes('right')) return swipeOutRight;
    if (position.includes('top')) return swipeOutTop;
    return swipeOutBottom;
  }
};

// --------------------------------------
// TOAST COMPONENT MODULE
// --------------------------------------
import React from 'react';
import * as RadixToast from '@radix-ui/react-toast';
import styled from '@emotion/styled';

// Styled components
const ToastViewport = styled(RadixToast.Viewport)<{ position: ToastPosition }>`
  --viewport-padding: 24px;
  position: fixed;
  display: flex;
  flex-direction: column;
  padding: var(--viewport-padding);
  gap: 10px;
  width: 390px;
  max-width: 100vw;
  margin: 0;
  list-style: none;
  z-index: 2147483647;
  outline: none;
  
  ${({ position }) => {
    switch (position) {
      case 'top-right':
        return `
          top: 0;
          right: 0;
        `;
      case 'top-left':
        return `
          top: 0;
          left: 0;
        `;
      case 'top-center':
        return `
          top: 0;
          left: 50%;
          transform: translateX(-50%);
        `;
      case 'bottom-center':
        return `
          bottom: 0;
          left: 50%;
          transform: translateX(-50%);
        `;
      case 'bottom-left':
        return `
          bottom: 0;
          left: 0;
        `;
      case 'bottom-right':
      default:
        return `
          bottom: 0;
          right: 0;
        `;
    }
  }}
`;

export type ToastVariant = 'default' | 'success' | 'error' | 'warning' | 'info';

interface StyledToastProps {
  variant?: ToastVariant;
  position: ToastPosition;
}

const StyledToast = styled(RadixToast.Root)<StyledToastProps>`
  background-color: ${(props) => {
    switch (props.variant) {
      case 'success':
        return '#10B981';
      case 'error':
        return '#EF4444';
      case 'warning':
        return '#F59E0B';
      case 'info':
        return '#3B82F6';
      default:
        return '#FFFFFF';
    }
  }};
  color: ${(props) => (props.variant === 'default' ? '#374151' : '#FFFFFF')};
  border-radius: 6px;
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
  padding: 16px;
  display: flex;
  flex-direction: column;
  position: relative;

  &[data-state="open"] {
    animation: ${props => animations.getSlideInAnimation(props.position)} 150ms cubic-bezier(0.16, 1, 0.3, 1);
  }
  
  &[data-state="closed"] {
    animation: ${props => animations.getSlideOutAnimation(props.position)} 100ms ease-in;
  }
  
  &[data-swipe="move"] {
    transform: ${props => props.position.includes('top') || props.position.includes('bottom') 
      ? 'translateY(var(--radix-toast-swipe-move-y))' 
      : 'translateX(var(--radix-toast-swipe-move-x))'};
  }
  
  &[data-swipe="cancel"] {
    transform: translateX(0) translateY(0);
    transition: transform 200ms ease-out;
  }
  
  &[data-swipe="end"] {
    animation: ${props => animations.getSwipeOutAnimation(props.position)} 100ms ease-out;
  }
`;

const ContentContainer = styled.div`
  display: flex;
  flex-direction: column;
  margin-right: 24px; // Space for close button
`;

const ToastTitle = styled(RadixToast.Title)`
  margin-bottom: 4px;
  font-weight: 600;
  font-size: 16px;
`;

const ToastDescription = styled(RadixToast.Description)`
  margin: 0;
  font-size: 14px;
  line-height: 1.4;
  opacity: 0.9;
`;

const ToastClose = styled(RadixToast.Close)`
  position: absolute;
  top: 12px;
  right: 12px;
  background: transparent;
  border: none;
  padding: 4px;
  cursor: pointer;
  color: inherit;
  opacity: 0.7;
  &:hover {
    opacity: 1;
  }
`;

const ActionContainer = styled.div`
  display: flex;
  justify-content: flex-end;
  margin-top: 12px;
`;

const StyledAction = styled(RadixToast.Action)`
  // Styling for action button
`;

// Component types
export interface ToastRootProps {
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
  title?: string;
  description?: string;
  action?: React.ReactNode;
  duration?: number;
  variant?: ToastVariant;
  position?: ToastPosition;
  children?: React.ReactNode;
}

// Root Toast component
const ToastRoot: React.FC<ToastRootProps> = ({
  open,
  onOpenChange,
  title,
  description,
  action,
  duration = 5000,
  variant = 'default',
  position = 'bottom-right',
  children,
}) => {
  return (
    <StyledToast
      open={open}
      onOpenChange={onOpenChange}
      duration={duration}
      variant={variant}
      position={position}
    >
      <ContentContainer>
        {title && <ToastTitle>{title}</ToastTitle>}
        {description && <ToastDescription>{description}</ToastDescription>}
        {children}
      </ContentContainer>

      <ToastClose aria-label="Close">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
        </svg>
      </ToastClose>

      {action && (
        <ActionContainer>
          <StyledAction altText="Toast action">{action}</StyledAction>
        </ActionContainer>
      )}
    </StyledToast>
  );
};

// Create component with nested components using Object.assign pattern
export const Toast = Object.assign(ToastRoot, {
  Provider: RadixToast.Provider,
  Viewport: ({ position = 'bottom-right' }: { position?: ToastPosition }) => (
    <ToastViewport position={position} />
  ),
  Title: ToastTitle,
  Description: ToastDescription,
  Action: StyledAction,
  Close: ToastClose,
  // Re-exporting native Radix Toast functions
  swipeDirection: RadixToast.swipeDirection,
  SwipeDirection: RadixToast.SwipeDirection,
});

// For backwards compatibility and direct access to Radix primitives
export { RadixToast };

// --------------------------------------
// TOAST CONTEXT MODULE
// --------------------------------------
import { createContext, useContext, useState, useRef, useImperativeHandle, forwardRef } from 'react';

// Types for Toast Context
interface ToastOptions {
  title?: string;
  description?: string;
  action?: React.ReactNode;
  duration?: number;
  variant?: ToastVariant;
  position?: ToastPosition;
  onOpenChange?: (open: boolean) => void;
}

interface ToastProviderProps {
  children: React.ReactNode;
  defaultPosition?: ToastPosition;
}

// Ref exposed methods
export interface ToastRef {
  show: (options: ToastOptions) => string;
  dismiss: (id: string) => void;
  dismissAll: () => void;
  updatePosition: (position: ToastPosition) => void;
}

interface ToastContextValue {
  toast: (options: ToastOptions) => string;
  dismiss: (id: string) => void;
  dismissAll: () => void;
  updatePosition: (position: ToastPosition) => void;
  toastRef: React.RefObject<ToastRef>;
}

// Create context
const ToastContext = createContext<ToastContextValue | undefined>(undefined);

// Toast item type
interface ToastItem extends ToastOptions {
  id: string;
  open: boolean;
}

// Provider component with ref
export const ToastContextProvider = forwardRef<ToastRef, ToastProviderProps>(
  ({ children, defaultPosition = 'bottom-right' }, ref) => {
    const [toasts, setToasts] = useState<ToastItem[]>([]);
    const [position, setPosition] = useState<ToastPosition>(defaultPosition);
    
    const internalRef = useRef<ToastRef>({
      show: () => '',
      dismiss: () => {},
      dismissAll: () => {},
      updatePosition: () => {},
    });

    const toast = (options: ToastOptions): string => {
      const id = Math.random().toString(36).substring(2, 9);
      setToasts((prevToasts) => [
        ...prevToasts,
        {
          id,
          open: true,
          position: options.position || position,
          ...options,
        },
      ]);
      return id;
    };

    const dismiss = (id: string): void => {
      setToasts((prevToasts) =>
        prevToasts.map((toast) =>
          toast.id === id ? { ...toast, open: false } : toast
        )
      );

      // Remove from state after animation completes
      setTimeout(() => {
        setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));
      }, 300);
    };

    const dismissAll = (): void => {
      setToasts((prevToasts) =>
        prevToasts.map((toast) => ({ ...toast, open: false }))
      );

      // Remove all from state after animation completes
      setTimeout(() => {
        setToasts([]);
      }, 300);
    };

    const updatePosition = (newPosition: ToastPosition): void => {
      setPosition(newPosition);
    };

    const handleOpenChange = (id: string, open: boolean): void => {
      if (!open) {
        setToasts((prevToasts) =>
          prevToasts.map((toast) =>
            toast.id === id ? { ...toast, open } : toast
          )
        );
        
        // Remove from state after animation completes
        setTimeout(() => {
          setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));
        }, 300);
      }
    };

    // Expose methods via ref
    useImperativeHandle(ref, () => ({
      show: toast,
      dismiss,
      dismissAll,
      updatePosition,
    }));

    // Update internal ref
    internalRef.current = {
      show: toast,
      dismiss,
      dismissAll,
      updatePosition,
    };

    // Group toasts by position
    const toastsByPosition: Record<ToastPosition, ToastItem[]> = {
      'top-left': [],
      'top-center': [],
      'top-right': [],
      'bottom-left': [],
      'bottom-center': [],
      'bottom-right': [],
    };

    toasts.forEach(toast => {
      const toastPosition = toast.position || position;
      toastsByPosition[toastPosition].push(toast);
    });

    return (
      <ToastContext.Provider value={{ toast, dismiss, dismissAll, updatePosition, toastRef: internalRef }}>
        <Toast.Provider>
          {children}
          
          {/* Render viewport and toasts for each position */}
          {(Object.keys(toastsByPosition) as ToastPosition[]).map(pos => 
            toastsByPosition[pos].length > 0 ? (
              <React.Fragment key={pos}>
                {toastsByPosition[pos].map((toast) => (
                  <Toast
                    key={toast.id}
                    open={toast.open}
                    onOpenChange={(open) => {
                      handleOpenChange(toast.id, open);
                      toast.onOpenChange?.(open);
                    }}
                    title={toast.title}
                    description={toast.description}
                    action={toast.action}
                    duration={toast.duration}
                    variant={toast.variant}
                    position={pos}
                  />
                ))}
                <Toast.Viewport position={pos} />
              </React.Fragment>
            ) : null
          )}
        </Toast.Provider>
      </ToastContext.Provider>
    );
  }
);

// Hook for consuming the toast context
export const useToast = (): ToastContextValue => {
  const context = useContext(ToastContext);
  if (context === undefined) {
    throw new Error('useToast must be used within a ToastContextProvider');
  }
  return context;
};

// --------------------------------------
// COMPONENTS FOR EXAMPLES MODULE
// --------------------------------------
const Button = styled.button`
  background-color: #3b82f6;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px 16px;
  font-size: 14px;
  cursor: pointer;
  margin: 4px;
  
  &:hover {
    background-color: #2563eb;
  }
`;

const ActionButton = styled.button`
  background-color: white;
  color: #3b82f6;
  border-radius: 4px;
  border: none;
  padding: 4px 8px;
  font-size: 12px;
  font-weight: 600;
  cursor: pointer;
`;

const PositionSelector = styled.select`
  padding: 8px 12px;
  border-radius: 6px;
  border: 1px solid #d1d5db;
  margin: 4px;
  font-size: 14px;
`;

const Container = styled.div`
  padding: 20px;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  margin-bottom: 20px;
`;

// --------------------------------------
// EXAMPLES MODULE
// --------------------------------------

// Example for custom toast creation
const CustomToastExample: React.FC = () => {
  const [open, setOpen] = useState(false);

  return (
    <Container>
      <h2>Custom Toast Creation with Composable Components</h2>
      <Button onClick={() => setOpen(true)}>Show Custom Toast</Button>
      
      <Toast.Provider swipeDirection="right">
        <Toast open={open} onOpenChange={setOpen} duration={5000}>
          <Toast.Title>Custom Toast Title</Toast.Title>
          <Toast.Description>
            This toast was created using composable components.
          </Toast.Description>
          <div style={{ marginTop: '12px', display: 'flex', justifyContent: 'flex-end' }}>
            <ActionButton>Custom Action</ActionButton>
          </div>
        </Toast>
        <Toast.Viewport position="bottom-right" />
      </Toast.Provider>
    </Container>
  );
};

// Demo for toast position selection
const ToastPositionDemo: React.FC = () => {
  const { toast, updatePosition } = useToast();
  const [currentPosition, setCurrentPosition] = useState<ToastPosition>('bottom-right');

  const handlePositionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newPosition = e.target.value as ToastPosition;
    setCurrentPosition(newPosition);
    updatePosition(newPosition);
  };

  const showToast = (variant: ToastVariant) => {
    toast({
      title: `${variant.charAt(0).toUpperCase() + variant.slice(1)} Toast`,
      description: `This toast appears at the ${currentPosition} position.`,
      variant,
      position: currentPosition,
      duration: 5000,
    });
  };

  const showToastWithCustomPosition = () => {
    // Showing toast at all positions
    const positions: ToastPosition[] = [
      'top-left', 'top-center', 'top-right',
      'bottom-left', 'bottom-center', 'bottom-right'
    ];
    
    positions.forEach((position, index) => {
      setTimeout(() => {
        toast({
          title: `Toast at ${position}`,
          description: `This toast appears at the ${position} position.`,
          variant: 'info',
          position: position,
          duration: 5000,
        });
      }, index * 300); // Stagger the appearance
    });
  };

  return (
    <Container>
      <h2>Toast Position Demo</h2>
      <div>
        <label htmlFor="position-selector">Global Toast Position: </label>
        <PositionSelector 
          id="position-selector"
          value={currentPosition} 
          onChange={handlePositionChange}
        >
          <option value="top-left">Top Left</option>
          <option value="top-center">Top Center</option>
          <option value="top-right">Top Right</option>
          <option value="bottom-left">Bottom Left</option>
          <option value="bottom-center">Bottom Center</option>
          <option value="bottom-right">Bottom Right</option>
        </PositionSelector>
      </div>
      
      <div style={{ marginTop: '16px' }}>
        <Button onClick={() => showToast('success')}>Success Toast</Button>
        <Button onClick={() => showToast('error')}>Error Toast</Button>
        <Button onClick={() => showToast('warning')}>Warning Toast</Button>
        <Button onClick={() => showToast('info')}>Info Toast</Button>
        <Button onClick={showToastWithCustomPosition}>Show Toasts at All Positions</Button>
      </div>
    </Container>
  );
};

// --------------------------------------
// MAIN APP MODULE
// --------------------------------------
const ToastDemoApp: React.FC = () => {
  const toastRef = useRef<ToastRef>(null);

  return (
    <div>
      <h1>Toast Demo with Object.assign Pattern</h1>
      
      {/* Demo using direct toast components */}
      <CustomToastExample />
      
      {/* Demo using Toast Context Provider */}
      <ToastContextProvider ref={toastRef} defaultPosition="bottom-right">
        <ToastPositionDemo />
      </ToastContextProvider>
    </div>
  );
};

export default ToastDemoApp;

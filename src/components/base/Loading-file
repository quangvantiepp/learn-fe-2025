import React from 'react';
import { LoadingIndicator, useLoading, FileItem } from './LoadingIndicator';

// Example 1: Basic usage với file list
const FileList: React.FC = () => {
  const files = [
    { id: 1, name: 'document.pdf' },
    { id: 2, name: 'spreadsheet.xlsx' },
    { id: 3, name: 'presentation.pptx' }
  ];

  const handleFileClick = async (fileId: number) => {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    console.log(`File ${fileId} loaded`);
  };

  return (
    <div>
      {files.map(file => (
        <FileItem
          key={file.id}
          fileName={file.name}
          onFileClick={() => handleFileClick(file.id)}
        />
      ))}
    </div>
  );
};

// Example 2: Custom loading với different positions
const CustomLoadingExample: React.FC = () => {
  const { isLoading, startLoading, stopLoading } = useLoading();

  const handleAction = async () => {
    startLoading();
    try {
      await new Promise(resolve => setTimeout(resolve, 3000));
    } finally {
      stopLoading();
    }
  };

  return (
    <div style={{ position: 'relative', padding: '20px', border: '1px solid #ddd' }}>
      <h3>Custom Loading Positions</h3>
      <button onClick={handleAction}>Start Action</button>
      
      {/* Loading ở góc phải trên */}
      <LoadingIndicator 
        isLoading={isLoading}
        type="spinner"
        position="absolute"
        top="10px"
        right="10px"
      />
      
      {/* Loading ở góc trái dưới */}
      <LoadingIndicator 
        isLoading={isLoading}
        type="dots"
        position="absolute"
        bottom="10px"
        left="10px"
        color="#e74c3c"
      />
    </div>
  );
};

// Example 3: Multiple loading types
const LoadingTypesExample: React.FC = () => {
  const spinner = useLoading();
  const dots = useLoading();
  const pulse = useLoading();

  const startAllLoading = () => {
    spinner.startLoading();
    dots.startLoading();
    pulse.startLoading();
  };

  const stopAllLoading = () => {
    spinner.stopLoading();
    dots.stopLoading();
    pulse.stopLoading();
  };

  return (
    <div style={{ padding: '20px' }}>
      <div style={{ marginBottom: '20px' }}>
        <button onClick={startAllLoading} style={{ marginRight: '10px' }}>
          Start All
        </button>
        <button onClick={stopAllLoading}>
          Stop All
        </button>
      </div>

      <div style={{ display: 'flex', gap: '20px' }}>
        {/* Spinner */}
        <div style={{ position: 'relative', padding: '40px', border: '1px solid #ddd' }}>
          <h4>Spinner</h4>
          <LoadingIndicator 
            isLoading={spinner.isLoading}
            type="spinner"
            size={24}
            color="#3498db"
          />
        </div>

        {/* Dots */}
        <div style={{ position: 'relative', padding: '40px', border: '1px solid #ddd' }}>
          <h4>Dots</h4>
          <LoadingIndicator 
            isLoading={dots.isLoading}
            type="dots"
            color="#e74c3c"
          />
        </div>

        {/* Pulse */}
        <div style={{ position: 'relative', padding: '40px', border: '1px solid #ddd' }}>
          <h4>Pulse</h4>
          <LoadingIndicator 
            isLoading={pulse.isLoading}
            type="pulse"
            size={20}
            color="#2ecc71"
          />
        </div>
      </div>
    </div>
  );
};

// Example 4: Inline loading (relative position)
const InlineLoadingExample: React.FC = () => {
  const { isLoading, startLoading, stopLoading } = useLoading();

  const handleSubmit = async () => {
    startLoading();
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      alert('Form submitted!');
    } finally {
      stopLoading();
    }
  };

  return (
    <div style={{ padding: '20px' }}>
      <h3>Inline Loading Example</h3>
      <form onSubmit={e => { e.preventDefault(); handleSubmit(); }}>
        <input type="text" placeholder="Enter something..." style={{ marginRight: '10px' }} />
        <button type="submit" disabled={isLoading} style={{ position: 'relative' }}>
          Submit
          <LoadingIndicator 
            isLoading={isLoading}
            type="spinner"
            position="relative"
            size={16}
            color="#ffffff"
            right="auto"
            top="auto"
          />
        </button>
      </form>
    </div>
  );
};

// Main App component
const App: React.FC = () => {
  return (
    <div style={{ padding: '20px' }}>
      <h1>Loading Indicator Examples</h1>
      
      <section style={{ marginBottom: '40px' }}>
        <h2>File List Example</h2>
        <FileList />
      </section>

      <section style={{ marginBottom: '40px' }}>
        <h2>Custom Positions</h2>
        <CustomLoadingExample />
      </section>

      <section style={{ marginBottom: '40px' }}>
        <h2>Different Loading Types</h2>
        <LoadingTypesExample />
      </section>

      <section style={{ marginBottom: '40px' }}>
        <h2>Inline Loading</h2>
        <InlineLoadingExample />
      </section>
    </div>
  );
};

export default App;
////////////// component
import React from 'react';
import styled from '@emotion/styled';
import { keyframes } from '@emotion/react';

// Định nghĩa animation
const spin = keyframes`
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
`;

const pulse = keyframes`
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
`;

const bounce = keyframes`
  0%, 20%, 50%, 80%, 100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-10px);
  }
  60% {
    transform: translateY(-5px);
  }
`;

// Styled components
const LoadingContainer = styled.div<{ 
  position: 'absolute' | 'relative';
  top?: string;
  right?: string;
  left?: string;
  bottom?: string;
}>`
  position: ${props => props.position};
  top: ${props => props.top || 'auto'};
  right: ${props => props.right || 'auto'};
  left: ${props => props.left || 'auto'};
  bottom: ${props => props.bottom || 'auto'};
  display: inline-flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
`;

const SpinnerCircle = styled.div<{ size: number; color: string }>`
  width: ${props => props.size}px;
  height: ${props => props.size}px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid ${props => props.color};
  border-radius: 50%;
  animation: ${spin} 1s linear infinite;
`;

const DotsContainer = styled.div`
  display: flex;
  gap: 4px;
`;

const Dot = styled.div<{ color: string; delay: number }>`
  width: 8px;
  height: 8px;
  background-color: ${props => props.color};
  border-radius: 50%;
  animation: ${bounce} 1.4s ease-in-out infinite;
  animation-delay: ${props => props.delay}s;
`;

const PulseCircle = styled.div<{ size: number; color: string }>`
  width: ${props => props.size}px;
  height: ${props => props.size}px;
  background-color: ${props => props.color};
  border-radius: 50%;
  animation: ${pulse} 1.5s ease-in-out infinite;
`;

// Types
export type LoadingType = 'spinner' | 'dots' | 'pulse';
export type LoadingPosition = 'absolute' | 'relative';

export interface LoadingIndicatorProps {
  isLoading: boolean;
  type?: LoadingType;
  size?: number;
  color?: string;
  position?: LoadingPosition;
  top?: string;
  right?: string;
  left?: string;
  bottom?: string;
  className?: string;
}

// Main component
export const LoadingIndicator: React.FC<LoadingIndicatorProps> = ({
  isLoading,
  type = 'spinner',
  size = 20,
  color = '#3498db',
  position = 'absolute',
  top = '8px',
  right = '8px',
  left,
  bottom,
  className
}) => {
  if (!isLoading) return null;

  const renderLoadingContent = () => {
    switch (type) {
      case 'spinner':
        return <SpinnerCircle size={size} color={color} />;
      
      case 'dots':
        return (
          <DotsContainer>
            <Dot color={color} delay={0} />
            <Dot color={color} delay={0.2} />
            <Dot color={color} delay={0.4} />
          </DotsContainer>
        );
      
      case 'pulse':
        return <PulseCircle size={size} color={color} />;
      
      default:
        return <SpinnerCircle size={size} color={color} />;
    }
  };

  return (
    <LoadingContainer
      position={position}
      top={top}
      right={right}
      left={left}
      bottom={bottom}
      className={className}
    >
      {renderLoadingContent()}
    </LoadingContainer>
  );
};

// Hook để quản lý loading state
export const useLoading = (initialState: boolean = false) => {
  const [isLoading, setIsLoading] = React.useState(initialState);

  const startLoading = React.useCallback(() => {
    setIsLoading(true);
  }, []);

  const stopLoading = React.useCallback(() => {
    setIsLoading(false);
  }, []);

  const toggleLoading = React.useCallback(() => {
    setIsLoading(prev => !prev);
  }, []);

  return {
    isLoading,
    startLoading,
    stopLoading,
    toggleLoading,
    setIsLoading
  };
};

// Example usage component
export const FileItem: React.FC<{
  fileName: string;
  onFileClick: () => Promise<void>;
}> = ({ fileName, onFileClick }) => {
  const { isLoading, startLoading, stopLoading } = useLoading();

  const handleClick = async () => {
    startLoading();
    try {
      await onFileClick();
    } finally {
      stopLoading();
    }
  };

  return (
    <FileItemContainer onClick={handleClick}>
      <span>{fileName}</span>
      <LoadingIndicator 
        isLoading={isLoading}
        type="spinner"
        size={18}
        color="#007bff"
      />
    </FileItemContainer>
  );
};

const FileItemContainer = styled.div`
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  border: 1px solid #e1e5e9;
  border-radius: 8px;
  margin: 4px 0;
  cursor: pointer;
  transition: all 0.2s ease;

  &:hover {
    background-color: #f8f9fa;
    border-color: #007bff;
  }

  &:active {
    transform: translateY(1px);
  }
`;

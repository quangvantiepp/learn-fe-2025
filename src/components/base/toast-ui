// ui-toolkit/Toast/Toast.tsx
import React from 'react';
import * as RadixToast from '@radix-ui/react-toast';
import styled from '@emotion/styled';
import { keyframes } from '@emotion/react';

// Toast Position Types
export type ToastPosition = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';

// Animation keyframes
const slideInRight = keyframes`
  from { transform: translateX(calc(100% + var(--viewport-padding))); }
  to { transform: translateX(0); }
`;

const slideInLeft = keyframes`
  from { transform: translateX(calc(-100% - var(--viewport-padding))); }
  to { transform: translateX(0); }
`;

const slideInTop = keyframes`
  from { transform: translateY(calc(-100% - var(--viewport-padding))); }
  to { transform: translateY(0); }
`;

const slideInBottom = keyframes`
  from { transform: translateY(calc(100% + var(--viewport-padding))); }
  to { transform: translateY(0); }
`;

const slideOutRight = keyframes`
  from { transform: translateX(0); }
  to { transform: translateX(calc(100% + var(--viewport-padding))); }
`;

const slideOutLeft = keyframes`
  from { transform: translateX(0); }
  to { transform: translateX(calc(-100% - var(--viewport-padding))); }
`;

const slideOutTop = keyframes`
  from { transform: translateY(0); }
  to { transform: translateY(calc(-100% - var(--viewport-padding))); }
`;

const slideOutBottom = keyframes`
  from { transform: translateY(0); }
  to { transform: translateY(calc(100% + var(--viewport-padding))); }
`;

const swipeOutRight = keyframes`
  from { transform: translateX(var(--radix-toast-swipe-end-x)); }
  to { transform: translateX(calc(100% + var(--viewport-padding))); }
`;

const swipeOutLeft = keyframes`
  from { transform: translateX(var(--radix-toast-swipe-end-x)); }
  to { transform: translateX(calc(-100% - var(--viewport-padding))); }
`;

const swipeOutTop = keyframes`
  from { transform: translateY(var(--radix-toast-swipe-end-y)); }
  to { transform: translateY(calc(-100% - var(--viewport-padding))); }
`;

const swipeOutBottom = keyframes`
  from { transform: translateY(var(--radix-toast-swipe-end-y)); }
  to { transform: translateY(calc(100% + var(--viewport-padding))); }
`;

// Function to get animation based on position
const getSlideInAnimation = (position: ToastPosition) => {
  if (position.includes('left')) return slideInLeft;
  if (position.includes('right')) return slideInRight;
  if (position.includes('top')) return slideInTop;
  return slideInBottom;
};

const getSlideOutAnimation = (position: ToastPosition) => {
  if (position.includes('left')) return slideOutLeft;
  if (position.includes('right')) return slideOutRight;
  if (position.includes('top')) return slideOutTop;
  return slideOutBottom;
};

const getSwipeOutAnimation = (position: ToastPosition) => {
  if (position.includes('left')) return swipeOutLeft;
  if (position.includes('right')) return swipeOutRight;
  if (position.includes('top')) return swipeOutTop;
  return swipeOutBottom;
};

// Styled components
const ToastViewport = styled(RadixToast.Viewport)<{ position: ToastPosition }>`
  --viewport-padding: 24px;
  position: fixed;
  display: flex;
  flex-direction: column;
  padding: var(--viewport-padding);
  gap: 10px;
  width: 390px;
  max-width: 100vw;
  margin: 0;
  list-style: none;
  z-index: 2147483647;
  outline: none;
  
  ${({ position }) => {
    switch (position) {
      case 'top-right':
        return `
          top: 0;
          right: 0;
        `;
      case 'top-left':
        return `
          top: 0;
          left: 0;
        `;
      case 'top-center':
        return `
          top: 0;
          left: 50%;
          transform: translateX(-50%);
        `;
      case 'bottom-center':
        return `
          bottom: 0;
          left: 50%;
          transform: translateX(-50%);
        `;
      case 'bottom-left':
        return `
          bottom: 0;
          left: 0;
        `;
      case 'bottom-right':
      default:
        return `
          bottom: 0;
          right: 0;
        `;
    }
  }}
`;

interface StyledToastProps {
  variant?: 'default' | 'success' | 'error' | 'warning' | 'info';
  position: ToastPosition;
}

const StyledToast = styled(RadixToast.Root)<StyledToastProps>`
  background-color: ${(props) => {
    switch (props.variant) {
      case 'success':
        return '#10B981';
      case 'error':
        return '#EF4444';
      case 'warning':
        return '#F59E0B';
      case 'info':
        return '#3B82F6';
      default:
        return '#FFFFFF';
    }
  }};
  color: ${(props) => (props.variant === 'default' ? '#374151' : '#FFFFFF')};
  border-radius: 6px;
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
  padding: 16px;
  display: flex;
  flex-direction: column;
  position: relative;

  &[data-state="open"] {
    animation: ${props => getSlideInAnimation(props.position)} 150ms cubic-bezier(0.16, 1, 0.3, 1);
  }
  
  &[data-state="closed"] {
    animation: ${props => getSlideOutAnimation(props.position)} 100ms ease-in;
  }
  
  &[data-swipe="move"] {
    transform: ${props => props.position.includes('top') || props.position.includes('bottom') 
      ? 'translateY(var(--radix-toast-swipe-move-y))' 
      : 'translateX(var(--radix-toast-swipe-move-x))'};
  }
  
  &[data-swipe="cancel"] {
    transform: translateX(0) translateY(0);
    transition: transform 200ms ease-out;
  }
  
  &[data-swipe="end"] {
    animation: ${props => getSwipeOutAnimation(props.position)} 100ms ease-out;
  }
`;

const ContentContainer = styled.div`
  display: flex;
  flex-direction: column;
  margin-right: 24px; // Space for close button
`;

const ToastTitle = styled(RadixToast.Title)`
  margin-bottom: 4px;
  font-weight: 600;
  font-size: 16px;
`;

const ToastDescription = styled(RadixToast.Description)`
  margin: 0;
  font-size: 14px;
  line-height: 1.4;
  opacity: 0.9;
`;

const ToastClose = styled(RadixToast.Close)`
  position: absolute;
  top: 12px;
  right: 12px;
  background: transparent;
  border: none;
  padding: 4px;
  cursor: pointer;
  color: inherit;
  opacity: 0.7;
  &:hover {
    opacity: 1;
  }
`;

const ActionContainer = styled.div`
  display: flex;
  justify-content: flex-end;
  margin-top: 12px;
`;

// Component types
export interface ToastProps {
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
  title?: string;
  description?: string;
  action?: React.ReactNode;
  duration?: number;
  variant?: 'default' | 'success' | 'error' | 'warning' | 'info';
  position?: ToastPosition;
  children?: React.ReactNode;
}

// Toast component
export const Toast: React.FC<ToastProps> = ({
  open,
  onOpenChange,
  title,
  description,
  action,
  duration = 5000,
  variant = 'default',
  position = 'bottom-right',
  children,
}) => {
  return (
    <StyledToast
      open={open}
      onOpenChange={onOpenChange}
      duration={duration}
      variant={variant}
      position={position}
    >
      <ContentContainer>
        {title && <ToastTitle>{title}</ToastTitle>}
        {description && <ToastDescription>{description}</ToastDescription>}
        {children}
      </ContentContainer>

      <ToastClose aria-label="Close">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
        </svg>
      </ToastClose>

      {action && (
        <ActionContainer>
          <RadixToast.Action altText="Toast action">{action}</RadixToast.Action>
        </ActionContainer>
      )}
    </StyledToast>
  );
};

// Export ToastProvider for use in the app
export const ToastProvider = RadixToast.Provider;
export const ToastViewportComponent = ({ position = 'bottom-right' }: { position?: ToastPosition }) => (
  <ToastViewport position={position} />
);

// Re-export for convenience
export { RadixToast };
